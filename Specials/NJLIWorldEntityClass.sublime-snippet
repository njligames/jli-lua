<snippet>
  <content><![CDATA[
local WorldEntity = require "njli.statemachine.worldentity"

local ${1:NJLIWorldEntityClassName} = {}
${1:NJLIWorldEntityClassName}.__index = ${1:NJLIWorldEntityClassName}

local json = require('JSON')

setmetatable(${1:NJLIWorldEntityClassName}, {
  __index = WorldEntity,
  __call = function (cls, ...)
    local self = setmetatable({}, cls)
    WorldEntity.create(self, ...)
    self:create(...)
    return self
  end,
})

function ${1:NJLIWorldEntityClassName}:className()
  return "${1:NJLIWorldEntityClassName}"
end

function ${1:NJLIWorldEntityClassName}:class()
  return self
end

function ${1:NJLIWorldEntityClassName}:superClass()
  return WorldEntity
end

function ${1:NJLIWorldEntityClassName}:destroy()
  ${1:NJLIWorldEntityClassName}.__gc(self)
  WorldEntity.destroy(self)
end

function ${1:NJLIWorldEntityClassName}:create(init)
  --TODO: Create and initialize properties...

  if init then
    --TODO: Initialize the properties...
  end
end

function ${1:NJLIWorldEntityClassName}:__gc()
  --TODO: Destroy properties
end

function ${1:NJLIWorldEntityClassName}:__tostring()
  --TODO: Represent the class as a string...
  return json.encode(self)
end

--TODO: List the Functions for ${1:NJLIWorldEntityClassName}

function ${1:NJLIWorldEntityClassName}:isLoaded()
  return WorldEntity.isLoaded(self)
end

function ${1:NJLIWorldEntityClassName}:load()
  WorldEntity.load(self)
end

function ${1:NJLIWorldEntityClassName}:unLoad()
  WorldEntity.unLoad(self)
end

function ${1:NJLIWorldEntityClassName}:initialize()
  WorldEntity.initialize(self)
end

function ${1:NJLIWorldEntityClassName}:enter()
  WorldEntity.enter(self)
end

function ${1:NJLIWorldEntityClassName}:update(timeStep)
  WorldEntity.update(self, timeStep)
end

function ${1:NJLIWorldEntityClassName}:exit()
  WorldEntity.exit(self)
end

function ${1:NJLIWorldEntityClassName}:onMessage(message)
  WorldEntity.onMessage(self, message)
end

function ${1:NJLIWorldEntityClassName}:touchDown(touches)
  WorldEntity.touchDown(self, touches)
end

function ${1:NJLIWorldEntityClassName}:touchUp(touches)
  WorldEntity.touchUp(self, touches)
end

function ${1:NJLIWorldEntityClassName}:touchMove(touches)
  WorldEntity.touchMove(self, touches)
end

function ${1:NJLIWorldEntityClassName}:touchCancelled(touches)
  WorldEntity.touchCancelled(self, touches)
end

function ${1:NJLIWorldEntityClassName}:renderHUD()
  WorldEntity.renderHUD(self)
end

function ${1:NJLIWorldEntityClassName}:keyboardShow()
  WorldEntity.keyboardShow(self)
end

function ${1:NJLIWorldEntityClassName}:keyboardCancel()
  WorldEntity.keyboardCancel(self)
end

function ${1:NJLIWorldEntityClassName}:keyboardReturn(text)
  WorldEntity.keyboardReturn(self, text)
end

function ${1:NJLIWorldEntityClassName}:receivedMemoryWarning()
  WorldEntity.receivedMemoryWarning(self)
end

function ${1:NJLIWorldEntityClassName}:pause()
  WorldEntity.pause(self)
end

function ${1:NJLIWorldEntityClassName}:unPause()
  WorldEntity.unPause(self)
end

return ${1:NJLIWorldEntityClassName}

]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>NJLIWorldEntity</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.lua</scope>
</snippet>
