<snippet>
  <content><![CDATA[
local ${1:BaseClassName} = {}
${1:BaseClassName}.__index = ${1:BaseClassName}

local json = require('cjson')

setmetatable(${1:BaseClassName}, {
  __call = function (cls, ...)
    local self = setmetatable({}, cls)
    self:create(...)
    return self
  end,
})

function ${1:BaseClassName}:className()
  return "${1:BaseClassName}"
end

function ${1:BaseClassName}:class()
  return self
end

function ${1:BaseClassName}:superClass()
  return nil
end

function ${1:BaseClassName}:isa(theClass)
  local b_isa = false
  local cur_class = theClass:class()
  while ( nil ~= cur_class ) and ( false == b_isa ) do
    if cur_class == theClass then
      b_isa = true
    else
      cur_class = cur_class:superClass()
    end
  end

  return b_isa
end

function ${1:BaseClassName}:destroy()
  ${1:BaseClassName}.__gc(self)
end

function ${1:BaseClassName}:create(init)
  --TODO: Create and initialize properties...
  --[[
  --EXAMPLE:
  self._${2:variable1} = nil
  self._${3:variable2} = nil
  self._${4:variable3} = nil
  self._${5:variable4} = nil
  self._${6:variable5} = nil
  self._${7:variable6} = nil
  self._${8:variable7} = nil
  self._${9:variable8} = nil
  --]]

  if init then
    --TODO: Initialize the properties...
  end
end

function ${1:BaseClassName}:__gc()
  --TODO: Destroy properties
end

function ${1:BaseClassName}:__tostring()
  --TODO: Represent the class as a string...
  -- return "${1:BaseClassName}"
  return json.encode(self)
end

--TODO: List the Functions for ${1:BaseClassName}
  --[[
  --EXAMPLE:

function ${1:BaseClassName}:set_${2:variable1}(newval)
  self._${2:variable1} = newval
end

function ${1:BaseClassName}:get_${2:variable1}()
  return self._${2:variable1}
end

function ${1:BaseClassName}:set_${3:variable2}(newval)
  self._${3:variable2} = newval
end

function ${1:BaseClassName}:get_${3:variable2}()
  return self._${3:variable2}
end

function ${1:BaseClassName}:set_${4:variable3}(newval)
  self._${4:variable3} = newval
end

function ${1:BaseClassName}:get_${4:variable3}()
  return self._${4:variable3}
end

function ${1:BaseClassName}:set_${5:variable4}(newval)
  self._${5:variable4} = newval
end

function ${1:BaseClassName}:get_${5:variable4}()
  return self._${5:variable4}
end

function ${1:BaseClassName}:set_${6:variable5}(newval)
  self._${6:variable5} = newval
end

function ${1:BaseClassName}:get_${6:variable5}()
  return self._${6:variable5}
end

function ${1:BaseClassName}:set_${7:variable6}(newval)
  self._${7:variable6} = newval
end

function ${1:BaseClassName}:get_${7:variable6}()
  return self._${7:variable6}
end

function ${1:BaseClassName}:set_${8:variable7}(newval)
  self._${8:variable7} = newval
end

function ${1:BaseClassName}:get_${8:variable7}()
  return self._${8:variable7}
end

function ${1:BaseClassName}:set_${9:variable8}(newval)
  self._${9:variable8} = newval
end

function ${1:BaseClassName}:get_${9:variable8}()
  return self._${9:variable8}
end
  --]]

return ${1:BaseClassName}

]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>NJLIBaseClass</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.lua</scope>
</snippet>
